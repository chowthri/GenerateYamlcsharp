using System;
using System.ServiceModel;
using System.ServiceModel.Description;
using System.ServiceModel.Channels;
using System.Collections.Generic;
using YamlDotNet.Serialization;
using YamlDotNet.Serialization.NamingConventions;
using System.ServiceModel.Discovery;

namespace WsdlToYamlConverter
{
    class Program
    {
        static void Main(string[] args)
        {
            try
            {
                // Provide the WSDL URL and output YAML file path here
                string wsdlUrl = "https://example.com/service?wsdl"; // Replace with your WSDL URL
                string outputYamlPath = "output.yaml"; // Replace with desired output YAML file path

                // Configure a custom binding with increased message size quota
                BasicHttpBinding binding = new BasicHttpBinding
                {
                    MaxReceivedMessageSize = 10 * 1024 * 1024 // 10 MB
                };

                // Create the endpoint address for the WSDL URL
                EndpointAddress endpoint = new EndpointAddress(wsdlUrl);

                // Create the MetadataExchangeClient with the custom binding and endpoint
                MetadataExchangeClient mexClient = new MetadataExchangeClient(binding)
                {
                    Address = endpoint
                };

                // Retrieve the WSDL metadata
                MetadataSet metadataSet = mexClient.GetMetadata();

                // Parse WSDL
                WsdlImporter importer = new WsdlImporter(metadataSet);
                ServiceEndpointCollection endpoints = importer.ImportAllEndpoints();

                // Build OpenAPI object
                var openApi = new
                {
                    openapi = "3.0.1",
                    info = new
                    {
                        title = "Generated API",
                        description = $"OpenAPI specification converted from WSDL at {wsdlUrl}",
                        version = "1.0.0"
                    },
                    paths = new Dictionary<string, object>()
                };

                foreach (var endpoint in endpoints)
                {
                    var operations = new Dictionary<string, object>();

                    foreach (var operation in endpoint.Contract.Operations)
                    {
                        operations.Add(operation.Name, new
                        {
                            summary = $"Operation {operation.Name}",
                            requestBody = new
                            {
                                description = "Request body",
                                content = new Dictionary<string, object>
                                {
                                    { "application/xml", new { schema = new { type = "object" } } }
                                }
                            },
                            responses = new
                            {
                                "200" = new
                                {
                                    description = "Successful response",
                                    content = new Dictionary<string, object>
                                    {
                                        { "application/xml", new { schema = new { type = "object" } } }
                                    }
                                }
                            }
                        });
                    }

                    openApi.paths.Add($"/{endpoint.Contract.Name}", operations);
                }

                // Convert to YAML
                var serializer = new SerializerBuilder()
                    .WithNamingConvention(CamelCaseNamingConvention.Instance)
                    .Build();

                string yaml = serializer.Serialize(openApi);

                // Write YAML to file
                System.IO.File.WriteAllText(outputYamlPath, yaml);

                Console.WriteLine($"WSDL from {wsdlUrl} converted to OpenAPI YAML and saved at {outputYamlPath}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
        }
    }
}
