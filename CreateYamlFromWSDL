using System;
using System.Net.Http;
using System.Xml;
using System.Collections.Generic;
using YamlDotNet.Serialization;
using YamlDotNet.Serialization.NamingConventions;
using System.Threading.Tasks;

namespace WsdlToYamlConverter
{
    class Program
    {
        static async Task Main(string[] args)
        {
            // Provide the WSDL URL and output YAML file path
            string wsdlUrl = "https://example.com/service?wsdl"; // Replace with your WSDL URL
            string outputYamlPath = "output.yaml"; // Replace with desired output YAML file path

            try
            {
                // Fetch WSDL content
                string wsdlContent = await GetWsdlContent(wsdlUrl);

                // Parse the WSDL content
                XmlDocument xmlDoc = new XmlDocument();
                xmlDoc.LoadXml(wsdlContent);

                // Extract relevant WSDL details (services, ports, operations)
                var services = ExtractWsdlInfo(xmlDoc);

                // Convert to YAML format
                var serializer = new SerializerBuilder()
                    .WithNamingConvention(CamelCaseNamingConvention.Instance)
                    .Build();
                string yaml = serializer.Serialize(services);

                // Write YAML to file
                System.IO.File.WriteAllText(outputYamlPath, yaml);

                Console.WriteLine($"WSDL from {wsdlUrl} converted to OpenAPI YAML and saved at {outputYamlPath}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
        }

        // Fetch WSDL content from the URL
        private static async Task<string> GetWsdlContent(string wsdlUrl)
        {
            using (var client = new HttpClient())
            {
                return await client.GetStringAsync(wsdlUrl);
            }
        }

        // Extract basic WSDL details
        private static object ExtractWsdlInfo(XmlDocument xmlDoc)
        {
            var services = new Dictionary<string, object>();

            XmlNodeList serviceNodes = xmlDoc.GetElementsByTagName("service");
            foreach (XmlNode serviceNode in serviceNodes)
            {
                var serviceName = serviceNode.Attributes["name"].Value;
                var ports = new Dictionary<string, object>();

                XmlNodeList portNodes = serviceNode.SelectNodes("port");
                foreach (XmlNode portNode in portNodes)
                {
                    var portName = portNode.Attributes["name"].Value;
                    var binding = portNode.SelectSingleNode("binding").Attributes["name"].Value;
                    var operations = new List<string>();

                    // Find operations related to this port
                    XmlNodeList operationNodes = xmlDoc.GetElementsByTagName("operation");
                    foreach (XmlNode operationNode in operationNodes)
                    {
                        operations.Add(operationNode.Attributes["name"].Value);
                    }

                    ports.Add(portName, new { binding, operations });
                }

                services.Add(serviceName, ports);
            }

            return services;
        }
    }
}
