using System;
using System.Net;
using System.Xml;
using System.Collections.Generic;
using YamlDotNet.Serialization;
using YamlDotNet.Serialization.NamingConventions;

namespace WsdlToYamlConverter
{
    class Program
    {
        static void Main(string[] args)
        {
            // Provide the WSDL URL and output YAML file path here
            string wsdlUrl = "https://example.com/service?wsdl"; // Replace with your WSDL URL
            string outputYamlPath = "output.yaml"; // Replace with desired output YAML file path

            try
            {
                // Fetch WSDL content using WebClient (synchronous for .NET Framework 4.8)
                string wsdlContent = GetWsdlContent(wsdlUrl);

                // Parse the WSDL content
                XmlDocument xmlDoc = new XmlDocument();
                xmlDoc.LoadXml(wsdlContent);

                // Extract relevant WSDL details (services, ports, operations)
                var services = ExtractWsdlInfo(xmlDoc);

                // Convert to YAML format
                var serializer = new SerializerBuilder()
                    .WithNamingConvention(CamelCaseNamingConvention.Instance)
                    .Build();
                string yaml = serializer.Serialize(services);

                // Write YAML to file
                System.IO.File.WriteAllText(outputYamlPath, yaml);

                Console.WriteLine($"WSDL from {wsdlUrl} converted to OpenAPI YAML and saved at {outputYamlPath}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
        }

        // Fetch WSDL content from the URL (synchronous using WebClient)
        private static string GetWsdlContent(string wsdlUrl)
        {
            using (var client = new WebClient())
            {
                return client.DownloadString(wsdlUrl);
            }
        }

        // Extract basic WSDL details (services, ports, operations) considering namespaces
        private static object ExtractWsdlInfo(XmlDocument xmlDoc)
        {
            var services = new Dictionary<string, object>();

            // Create XmlNamespaceManager to handle namespaces
            XmlNamespaceManager nsManager = new XmlNamespaceManager(xmlDoc.NameTable);
            nsManager.AddNamespace("wsdl", "http://schemas.xmlsoap.org/wsdl/");

            // Get all service elements using the namespace manager
            XmlNodeList serviceNodes = xmlDoc.SelectNodes("//wsdl:service", nsManager);
            foreach (XmlNode serviceNode in serviceNodes)
            {
                var serviceName = serviceNode.Attributes["name"].Value;
                var ports = new Dictionary<string, object>();

                XmlNodeList portNodes = serviceNode.SelectNodes("wsdl:port", nsManager);
                foreach (XmlNode portNode in portNodes)
                {
                    var portName = portNode.Attributes["name"].Value;
                    var binding = portNode.SelectSingleNode("wsdl:binding", nsManager)?.Attributes["name"]?.Value;
                    var operations = new List<string>();

                    // Find operations related to this port
                    XmlNodeList operationNodes = xmlDoc.SelectNodes("//wsdl:operation", nsManager);
                    foreach (XmlNode operationNode in operationNodes)
                    {
                        operations.Add(operationNode.Attributes["name"].Value);
                    }

                    ports.Add(portName, new { binding, operations });
                }

                services.Add(serviceName, ports);
            }

            return services;
        }
    }
}
